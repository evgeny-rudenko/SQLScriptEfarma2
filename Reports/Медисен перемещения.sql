SELECT
        --H.SID,
        --H.FID,
		N_NACL = REPLACE(M.MNEMOCODE, '/','-'),
		D_NACL = M.DATE,
        
		
        CODE = G.ID_GOODS ,--(SELECT TOP 1 CODE FROM GOODS_CODE WHERE ID_CONTRACTOR = L.ID_SUPPLIER AND ID_GOODS = G.ID_GOODS AND GOODS_CODE.DATE_DELETED IS NULL),
        NAME = G.NAME,
        SCANCOD = isnull ( (select top 1 code from BAR_CODE where len (BAR_CODE.CODE)= 13 and BAR_CODE.CODE not like '2%' and BAR_CODE.DATE_DELETED is NULL and BAR_CODE.ID_GOODS = G.ID_GOODS ), ''), 
		FACTORY = P.NAME,
        COUNTRY = C.NAME, 
        QUANTITY = L.QUANTITY_REM, -- количество
		PRICE_MAKE = L.PRICE_PROD, -- цена завода без НДС
		PRICE_NAKE = L.PRICE_SUP - L.PVAT_SUP, -- цена за штуку без НДС
		SUM_NAKED = (L.PRICE_SUP * MI.QUANTITY) - (L.PVAT_SUP * MI.QUANTITY), -- сумма поставщика без НДС
		NDS_PR = L.VAT_SUP, -- НДС поставщика %
		NDS_SUM =  L.PVAT_SUP * MI.QUANTITY, -- сумма НДС поставщика
		PRICE_REES = isnull(a.price, G.REGISTER_PRICE),
        DATE_REES = isnull(a.date, G.REGISTRATION_DATE),
		ISLIFE = CONVERT(BIT, G.IMPORTANT),
        SERIES = S.SERIES_NUMBER,
        DATE_VALID = S.BEST_BEFORE,
        GTD = L.GTD_NUMBER , 
        SERT = (select top 1 CERT_NUMBER from CERTIFICATE where CERTIFICATE.ID_SERIES_GLOBAL = S.ID_SERIES_GLOBAL),
        FILIAL = (Select top 1 NAME from STORE where STORE.ID_STORE =  M.ID_STORE_FROM) ,
		APTEKA = (Select top 1 NAME from STORE where STORE.ID_STORE =  M.ID_STORE_FROM),
		PRICE_SALE = L.PRICE_SAL, -- цена реализации
        DATEGIV = (select top 1 CERT_DATE from CERTIFICATE where CERTIFICATE.ID_SERIES_GLOBAL = S.ID_SERIES_GLOBAL),
		DEND = (select top 1 CERT_END_DATE from CERTIFICATE where CERTIFICATE.ID_SERIES_GLOBAL = S.ID_SERIES_GLOBAL),
		ORGANGIV = (select top 1 CERTIFICATE.CERT_OWN from CERTIFICATE where CERTIFICATE.ID_SERIES_GLOBAL = S.ID_SERIES_GLOBAL),
		REGNUMBER = (select top 1 CERT_NUMBER from CERTIFICATE where CERTIFICATE.ID_SERIES_GLOBAL = S.ID_SERIES_GLOBAL),
		NUMBERANALIZ = '',
		CURRENCY = L.INTERNAL_BARCODE

		/*
        SUPPLIER_VAT_PER_UNIT = L.PVAT_SUP,
        SUPPLIER_ADPRICE = CASE ISNULL(L.PRICE_PROD,0) WHEN 0 THEN NULL ELSE ((L.PRICE_SUP * 100)/L.PRICE_PROD)-100 END,
        SUPPLIER_PRICE_VAT = L.PRICE_SUP,
        SUPPLIER_SUM_VAT = L.PRICE_SUP * MI.QUANTITY,
        RETAIL_ADPRICE = CASE ISNULL(L.PRICE_SUP,0) WHEN 0 THEN NULL ELSE ((L.PRICE_SAL * 100)/L.PRICE_SUP)-100 END,
        RETAIL_PRICE = L.PRICE_SAL - L.PVAT_SAL,
        RETAIL_VAT = VAT_SAL,
        
        RETAIL_SUM = (L.PRICE_SAL * MI.QUANTITY) - (L.PVAT_SAL * MI.QUANTITY),
        RETAIL_VAT_SUM = L.PVAT_SAL * MI.QUANTITY,
        RETAIL_SUM_VAT = L.PRICE_SAL * MI.QUANTITY,
        
		S.ID_SERIES,
		UNIT_NAME = U.SHORT_NAME,
		NUMERATOR = SR.NUMERATOR, 
        DENOMINATOR = SR.DENOMINATOR
        */

    FROM MOVEMENT_ITEM MI
    INNER JOIN LOT L ON L.ID_DOCUMENT = MI.ID_MOVEMENT_GLOBAL AND L.ID_DOCUMENT_ITEM = MI.ID_MOVEMENT_ITEM_GLOBAL
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
    INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
    INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
    --INNER JOIN @DOC D ON D.ID_SUPPLIER = L.ID_SUPPLIER
    --INNER JOIN @HEADER H ON D.FID = H.FID
    LEFT join dbo.fn_actual_register_price(null) a on a.id_goods_global = G.id_goods_global
	left join MOVEMENT M ON M.ID_MOVEMENT_GLOBAL = MI.ID_MOVEMENT_GLOBAL 
    --WHERE MI.ID_MOVEMENT_GLOBAL = @ID_GLOBAL
--     AND EXISTS (SELECT NULL FROM LOT_MOVEMENT LM WHERE LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL)
--     AND L.QUANTITY_REM>0
where m.DATE between GETDATE() - 15 and GETDATE()

-- select * from movement